/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.39
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Apikey_createObject_v1_Request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Apikey_createObject_v1_Request::Apikey_createObject_v1_Request()
{
    m_ObjApikeyIsSet = false;
    m_ObjApikeyCompoundIsSet = false;
}

Apikey_createObject_v1_Request::~Apikey_createObject_v1_Request()
{
}

void Apikey_createObject_v1_Request::validate()
{
    // TODO: implement validation
}

web::json::value Apikey_createObject_v1_Request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ObjApikeyIsSet)
    {
        val[utility::conversions::to_string_t("objApikey")] = ModelBase::toJson(m_ObjApikey);
    }
    if(m_ObjApikeyCompoundIsSet)
    {
        val[utility::conversions::to_string_t("objApikeyCompound")] = ModelBase::toJson(m_ObjApikeyCompound);
    }

    return val;
}

bool Apikey_createObject_v1_Request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("objApikey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objApikey"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Apikey_Request> refVal_objApikey;
            ok &= ModelBase::fromJson(fieldValue, refVal_objApikey);
            setObjApikey(refVal_objApikey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objApikeyCompound")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objApikeyCompound"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Apikey_RequestCompound> refVal_objApikeyCompound;
            ok &= ModelBase::fromJson(fieldValue, refVal_objApikeyCompound);
            setObjApikeyCompound(refVal_objApikeyCompound);
        }
    }
    return ok;
}

void Apikey_createObject_v1_Request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ObjApikeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objApikey"), m_ObjApikey));
    }
    if(m_ObjApikeyCompoundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objApikeyCompound"), m_ObjApikeyCompound));
    }
}

bool Apikey_createObject_v1_Request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("objApikey")))
    {
        std::shared_ptr<Apikey_Request> refVal_objApikey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objApikey")), refVal_objApikey );
        setObjApikey(refVal_objApikey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objApikeyCompound")))
    {
        std::shared_ptr<Apikey_RequestCompound> refVal_objApikeyCompound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objApikeyCompound")), refVal_objApikeyCompound );
        setObjApikeyCompound(refVal_objApikeyCompound);
    }
    return ok;
}

std::shared_ptr<Apikey_Request> Apikey_createObject_v1_Request::getObjApikey() const
{
    return m_ObjApikey;
}

void Apikey_createObject_v1_Request::setObjApikey(const std::shared_ptr<Apikey_Request>& value)
{
    m_ObjApikey = value;
    m_ObjApikeyIsSet = true;
}

bool Apikey_createObject_v1_Request::objApikeyIsSet() const
{
    return m_ObjApikeyIsSet;
}

void Apikey_createObject_v1_Request::unsetObjApikey()
{
    m_ObjApikeyIsSet = false;
}
std::shared_ptr<Apikey_RequestCompound> Apikey_createObject_v1_Request::getObjApikeyCompound() const
{
    return m_ObjApikeyCompound;
}

void Apikey_createObject_v1_Request::setObjApikeyCompound(const std::shared_ptr<Apikey_RequestCompound>& value)
{
    m_ObjApikeyCompound = value;
    m_ObjApikeyCompoundIsSet = true;
}

bool Apikey_createObject_v1_Request::objApikeyCompoundIsSet() const
{
    return m_ObjApikeyCompoundIsSet;
}

void Apikey_createObject_v1_Request::unsetObjApikeyCompound()
{
    m_ObjApikeyCompoundIsSet = false;
}
}
}
}
}


