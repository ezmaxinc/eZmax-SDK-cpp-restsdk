/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.44
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Field_eEzsignfolderStep.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Field_eEzsignfolderStep::Field_eEzsignfolderStep()
{
}

Field_eEzsignfolderStep::~Field_eEzsignfolderStep()
{
}

void Field_eEzsignfolderStep::validate()
{
    // TODO: implement validation
}

web::json::value Field_eEzsignfolderStep::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_UNSENT) val = web::json::value::string(U(Unsent));
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_SENT) val = web::json::value::string(U(Sent));
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_PARTIALLYSIGNED) val = web::json::value::string(U(PartiallySigned));
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_EXPIRED) val = web::json::value::string(U(Expired));
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_SIGNED) val = web::json::value::string(U(Signed));
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_COMPLETED) val = web::json::value::string(U(Completed));
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_ARCHIVED) val = web::json::value::string(U(Archived));

    return val;
}

bool Field_eEzsignfolderStep::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(Unsent)) m_value = eField_eEzsignfolderStep::Field_eEzsignfolderStep_UNSENT;
    if (s == utility::conversions::to_string_t(Sent)) m_value = eField_eEzsignfolderStep::Field_eEzsignfolderStep_SENT;
    if (s == utility::conversions::to_string_t(PartiallySigned)) m_value = eField_eEzsignfolderStep::Field_eEzsignfolderStep_PARTIALLYSIGNED;
    if (s == utility::conversions::to_string_t(Expired)) m_value = eField_eEzsignfolderStep::Field_eEzsignfolderStep_EXPIRED;
    if (s == utility::conversions::to_string_t(Signed)) m_value = eField_eEzsignfolderStep::Field_eEzsignfolderStep_SIGNED;
    if (s == utility::conversions::to_string_t(Completed)) m_value = eField_eEzsignfolderStep::Field_eEzsignfolderStep_COMPLETED;
    if (s == utility::conversions::to_string_t(Archived)) m_value = eField_eEzsignfolderStep::Field_eEzsignfolderStep_ARCHIVED;
    return true;
}

void Field_eEzsignfolderStep::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_UNSENT) s = utility::conversions::to_string_t(Unsent);
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_SENT) s = utility::conversions::to_string_t(Sent);
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_PARTIALLYSIGNED) s = utility::conversions::to_string_t(PartiallySigned);
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_EXPIRED) s = utility::conversions::to_string_t(Expired);
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_SIGNED) s = utility::conversions::to_string_t(Signed);
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_COMPLETED) s = utility::conversions::to_string_t(Completed);
    if (m_value == eField_eEzsignfolderStep::Field_eEzsignfolderStep_ARCHIVED) s = utility::conversions::to_string_t(Archived);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool Field_eEzsignfolderStep::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eField_eEzsignfolderStep v;

        
        if (s == utility::conversions::to_string_t(Unsent)) v = eField_eEzsignfolderStep::Field_eEzsignfolderStep_UNSENT;
        if (s == utility::conversions::to_string_t(Sent)) v = eField_eEzsignfolderStep::Field_eEzsignfolderStep_SENT;
        if (s == utility::conversions::to_string_t(PartiallySigned)) v = eField_eEzsignfolderStep::Field_eEzsignfolderStep_PARTIALLYSIGNED;
        if (s == utility::conversions::to_string_t(Expired)) v = eField_eEzsignfolderStep::Field_eEzsignfolderStep_EXPIRED;
        if (s == utility::conversions::to_string_t(Signed)) v = eField_eEzsignfolderStep::Field_eEzsignfolderStep_SIGNED;
        if (s == utility::conversions::to_string_t(Completed)) v = eField_eEzsignfolderStep::Field_eEzsignfolderStep_COMPLETED;
        if (s == utility::conversions::to_string_t(Archived)) v = eField_eEzsignfolderStep::Field_eEzsignfolderStep_ARCHIVED;

        setValue(v);
    }
    return ok;
}

Field_eEzsignfolderStep::eField_eEzsignfolderStep Field_eEzsignfolderStep::getValue() const
{
   return m_value;
}

void Field_eEzsignfolderStep::setValue(Field_eEzsignfolderStep::eField_eEzsignfolderStep const value)
{
   m_value = value;
}


}
}
}
}


