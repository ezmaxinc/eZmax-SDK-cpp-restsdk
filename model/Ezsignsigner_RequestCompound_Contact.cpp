/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.46
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Ezsignsigner_RequestCompound_Contact.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Ezsignsigner_RequestCompound_Contact::Ezsignsigner_RequestCompound_Contact()
{
    m_SContactFirstname = utility::conversions::to_string_t("");
    m_SContactFirstnameIsSet = false;
    m_SContactLastname = utility::conversions::to_string_t("");
    m_SContactLastnameIsSet = false;
    m_FkiLanguageID = 0;
    m_FkiLanguageIDIsSet = false;
    m_SEmailAddress = utility::conversions::to_string_t("");
    m_SEmailAddressIsSet = false;
    m_SPhoneNumber = utility::conversions::to_string_t("");
    m_SPhoneNumberIsSet = false;
    m_SPhoneNumberCell = utility::conversions::to_string_t("");
    m_SPhoneNumberCellIsSet = false;
}

Ezsignsigner_RequestCompound_Contact::~Ezsignsigner_RequestCompound_Contact()
{
}

void Ezsignsigner_RequestCompound_Contact::validate()
{
    // TODO: implement validation
}

web::json::value Ezsignsigner_RequestCompound_Contact::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SContactFirstnameIsSet)
    {
        val[utility::conversions::to_string_t("sContactFirstname")] = ModelBase::toJson(m_SContactFirstname);
    }
    if(m_SContactLastnameIsSet)
    {
        val[utility::conversions::to_string_t("sContactLastname")] = ModelBase::toJson(m_SContactLastname);
    }
    if(m_FkiLanguageIDIsSet)
    {
        val[utility::conversions::to_string_t("fkiLanguageID")] = ModelBase::toJson(m_FkiLanguageID);
    }
    if(m_SEmailAddressIsSet)
    {
        val[utility::conversions::to_string_t("sEmailAddress")] = ModelBase::toJson(m_SEmailAddress);
    }
    if(m_SPhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t("sPhoneNumber")] = ModelBase::toJson(m_SPhoneNumber);
    }
    if(m_SPhoneNumberCellIsSet)
    {
        val[utility::conversions::to_string_t("sPhoneNumberCell")] = ModelBase::toJson(m_SPhoneNumberCell);
    }

    return val;
}

bool Ezsignsigner_RequestCompound_Contact::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("sContactFirstname")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sContactFirstname"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sContactFirstname;
            ok &= ModelBase::fromJson(fieldValue, refVal_sContactFirstname);
            setSContactFirstname(refVal_sContactFirstname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sContactLastname")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sContactLastname"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sContactLastname;
            ok &= ModelBase::fromJson(fieldValue, refVal_sContactLastname);
            setSContactLastname(refVal_sContactLastname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fkiLanguageID")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fkiLanguageID"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fkiLanguageID;
            ok &= ModelBase::fromJson(fieldValue, refVal_fkiLanguageID);
            setFkiLanguageID(refVal_fkiLanguageID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sEmailAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sEmailAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_sEmailAddress);
            setSEmailAddress(refVal_sEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sPhoneNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sPhoneNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_sPhoneNumber);
            setSPhoneNumber(refVal_sPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sPhoneNumberCell")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sPhoneNumberCell"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sPhoneNumberCell;
            ok &= ModelBase::fromJson(fieldValue, refVal_sPhoneNumberCell);
            setSPhoneNumberCell(refVal_sPhoneNumberCell);
        }
    }
    return ok;
}

void Ezsignsigner_RequestCompound_Contact::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SContactFirstnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sContactFirstname"), m_SContactFirstname));
    }
    if(m_SContactLastnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sContactLastname"), m_SContactLastname));
    }
    if(m_FkiLanguageIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fkiLanguageID"), m_FkiLanguageID));
    }
    if(m_SEmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sEmailAddress"), m_SEmailAddress));
    }
    if(m_SPhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sPhoneNumber"), m_SPhoneNumber));
    }
    if(m_SPhoneNumberCellIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sPhoneNumberCell"), m_SPhoneNumberCell));
    }
}

bool Ezsignsigner_RequestCompound_Contact::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sContactFirstname")))
    {
        utility::string_t refVal_sContactFirstname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sContactFirstname")), refVal_sContactFirstname );
        setSContactFirstname(refVal_sContactFirstname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sContactLastname")))
    {
        utility::string_t refVal_sContactLastname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sContactLastname")), refVal_sContactLastname );
        setSContactLastname(refVal_sContactLastname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fkiLanguageID")))
    {
        int32_t refVal_fkiLanguageID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fkiLanguageID")), refVal_fkiLanguageID );
        setFkiLanguageID(refVal_fkiLanguageID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sEmailAddress")))
    {
        utility::string_t refVal_sEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sEmailAddress")), refVal_sEmailAddress );
        setSEmailAddress(refVal_sEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sPhoneNumber")))
    {
        utility::string_t refVal_sPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sPhoneNumber")), refVal_sPhoneNumber );
        setSPhoneNumber(refVal_sPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sPhoneNumberCell")))
    {
        utility::string_t refVal_sPhoneNumberCell;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sPhoneNumberCell")), refVal_sPhoneNumberCell );
        setSPhoneNumberCell(refVal_sPhoneNumberCell);
    }
    return ok;
}

utility::string_t Ezsignsigner_RequestCompound_Contact::getSContactFirstname() const
{
    return m_SContactFirstname;
}

void Ezsignsigner_RequestCompound_Contact::setSContactFirstname(const utility::string_t& value)
{
    m_SContactFirstname = value;
    m_SContactFirstnameIsSet = true;
}

bool Ezsignsigner_RequestCompound_Contact::sContactFirstnameIsSet() const
{
    return m_SContactFirstnameIsSet;
}

void Ezsignsigner_RequestCompound_Contact::unsetSContactFirstname()
{
    m_SContactFirstnameIsSet = false;
}
utility::string_t Ezsignsigner_RequestCompound_Contact::getSContactLastname() const
{
    return m_SContactLastname;
}

void Ezsignsigner_RequestCompound_Contact::setSContactLastname(const utility::string_t& value)
{
    m_SContactLastname = value;
    m_SContactLastnameIsSet = true;
}

bool Ezsignsigner_RequestCompound_Contact::sContactLastnameIsSet() const
{
    return m_SContactLastnameIsSet;
}

void Ezsignsigner_RequestCompound_Contact::unsetSContactLastname()
{
    m_SContactLastnameIsSet = false;
}
int32_t Ezsignsigner_RequestCompound_Contact::getFkiLanguageID() const
{
    return m_FkiLanguageID;
}

void Ezsignsigner_RequestCompound_Contact::setFkiLanguageID(int32_t value)
{
    m_FkiLanguageID = value;
    m_FkiLanguageIDIsSet = true;
}

bool Ezsignsigner_RequestCompound_Contact::fkiLanguageIDIsSet() const
{
    return m_FkiLanguageIDIsSet;
}

void Ezsignsigner_RequestCompound_Contact::unsetFkiLanguageID()
{
    m_FkiLanguageIDIsSet = false;
}
utility::string_t Ezsignsigner_RequestCompound_Contact::getSEmailAddress() const
{
    return m_SEmailAddress;
}

void Ezsignsigner_RequestCompound_Contact::setSEmailAddress(const utility::string_t& value)
{
    m_SEmailAddress = value;
    m_SEmailAddressIsSet = true;
}

bool Ezsignsigner_RequestCompound_Contact::sEmailAddressIsSet() const
{
    return m_SEmailAddressIsSet;
}

void Ezsignsigner_RequestCompound_Contact::unsetSEmailAddress()
{
    m_SEmailAddressIsSet = false;
}
utility::string_t Ezsignsigner_RequestCompound_Contact::getSPhoneNumber() const
{
    return m_SPhoneNumber;
}

void Ezsignsigner_RequestCompound_Contact::setSPhoneNumber(const utility::string_t& value)
{
    m_SPhoneNumber = value;
    m_SPhoneNumberIsSet = true;
}

bool Ezsignsigner_RequestCompound_Contact::sPhoneNumberIsSet() const
{
    return m_SPhoneNumberIsSet;
}

void Ezsignsigner_RequestCompound_Contact::unsetSPhoneNumber()
{
    m_SPhoneNumberIsSet = false;
}
utility::string_t Ezsignsigner_RequestCompound_Contact::getSPhoneNumberCell() const
{
    return m_SPhoneNumberCell;
}

void Ezsignsigner_RequestCompound_Contact::setSPhoneNumberCell(const utility::string_t& value)
{
    m_SPhoneNumberCell = value;
    m_SPhoneNumberCellIsSet = true;
}

bool Ezsignsigner_RequestCompound_Contact::sPhoneNumberCellIsSet() const
{
    return m_SPhoneNumberCellIsSet;
}

void Ezsignsigner_RequestCompound_Contact::unsetSPhoneNumberCell()
{
    m_SPhoneNumberCellIsSet = false;
}
}
}
}
}


