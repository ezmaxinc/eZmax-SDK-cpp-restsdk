/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.42
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Contactinformations_RequestCompound.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Contactinformations_RequestCompound::Contactinformations_RequestCompound()
{
    m_A_objAddressIsSet = false;
    m_A_objPhoneIsSet = false;
    m_A_objEmailIsSet = false;
    m_A_objWebsiteIsSet = false;
    m_IAddressDefault = 0;
    m_IAddressDefaultIsSet = false;
    m_IPhoneDefault = 0;
    m_IPhoneDefaultIsSet = false;
    m_IEmailDefault = 0;
    m_IEmailDefaultIsSet = false;
    m_IWebsiteDefault = 0;
    m_IWebsiteDefaultIsSet = false;
}

Contactinformations_RequestCompound::~Contactinformations_RequestCompound()
{
}

void Contactinformations_RequestCompound::validate()
{
    // TODO: implement validation
}

web::json::value Contactinformations_RequestCompound::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_A_objAddressIsSet)
    {
        val[utility::conversions::to_string_t("a_objAddress")] = ModelBase::toJson(m_A_objAddress);
    }
    if(m_A_objPhoneIsSet)
    {
        val[utility::conversions::to_string_t("a_objPhone")] = ModelBase::toJson(m_A_objPhone);
    }
    if(m_A_objEmailIsSet)
    {
        val[utility::conversions::to_string_t("a_objEmail")] = ModelBase::toJson(m_A_objEmail);
    }
    if(m_A_objWebsiteIsSet)
    {
        val[utility::conversions::to_string_t("a_objWebsite")] = ModelBase::toJson(m_A_objWebsite);
    }
    if(m_IAddressDefaultIsSet)
    {
        val[utility::conversions::to_string_t("iAddressDefault")] = ModelBase::toJson(m_IAddressDefault);
    }
    if(m_IPhoneDefaultIsSet)
    {
        val[utility::conversions::to_string_t("iPhoneDefault")] = ModelBase::toJson(m_IPhoneDefault);
    }
    if(m_IEmailDefaultIsSet)
    {
        val[utility::conversions::to_string_t("iEmailDefault")] = ModelBase::toJson(m_IEmailDefault);
    }
    if(m_IWebsiteDefaultIsSet)
    {
        val[utility::conversions::to_string_t("iWebsiteDefault")] = ModelBase::toJson(m_IWebsiteDefault);
    }

    return val;
}

bool Contactinformations_RequestCompound::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("a_objAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("a_objAddress"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Address_Request>> refVal_a_objAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_a_objAddress);
            setAObjAddress(refVal_a_objAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("a_objPhone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("a_objPhone"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Phone_Request>> refVal_a_objPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_a_objPhone);
            setAObjPhone(refVal_a_objPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("a_objEmail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("a_objEmail"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Email_Request>> refVal_a_objEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_a_objEmail);
            setAObjEmail(refVal_a_objEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("a_objWebsite")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("a_objWebsite"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Website_Request>> refVal_a_objWebsite;
            ok &= ModelBase::fromJson(fieldValue, refVal_a_objWebsite);
            setAObjWebsite(refVal_a_objWebsite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iAddressDefault")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iAddressDefault"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_iAddressDefault;
            ok &= ModelBase::fromJson(fieldValue, refVal_iAddressDefault);
            setIAddressDefault(refVal_iAddressDefault);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iPhoneDefault")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iPhoneDefault"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_iPhoneDefault;
            ok &= ModelBase::fromJson(fieldValue, refVal_iPhoneDefault);
            setIPhoneDefault(refVal_iPhoneDefault);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iEmailDefault")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iEmailDefault"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_iEmailDefault;
            ok &= ModelBase::fromJson(fieldValue, refVal_iEmailDefault);
            setIEmailDefault(refVal_iEmailDefault);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iWebsiteDefault")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iWebsiteDefault"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_iWebsiteDefault;
            ok &= ModelBase::fromJson(fieldValue, refVal_iWebsiteDefault);
            setIWebsiteDefault(refVal_iWebsiteDefault);
        }
    }
    return ok;
}

void Contactinformations_RequestCompound::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_A_objAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("a_objAddress"), m_A_objAddress));
    }
    if(m_A_objPhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("a_objPhone"), m_A_objPhone));
    }
    if(m_A_objEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("a_objEmail"), m_A_objEmail));
    }
    if(m_A_objWebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("a_objWebsite"), m_A_objWebsite));
    }
    if(m_IAddressDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iAddressDefault"), m_IAddressDefault));
    }
    if(m_IPhoneDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iPhoneDefault"), m_IPhoneDefault));
    }
    if(m_IEmailDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iEmailDefault"), m_IEmailDefault));
    }
    if(m_IWebsiteDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iWebsiteDefault"), m_IWebsiteDefault));
    }
}

bool Contactinformations_RequestCompound::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("a_objAddress")))
    {
        std::vector<std::shared_ptr<Address_Request>> refVal_a_objAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("a_objAddress")), refVal_a_objAddress );
        setAObjAddress(refVal_a_objAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("a_objPhone")))
    {
        std::vector<std::shared_ptr<Phone_Request>> refVal_a_objPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("a_objPhone")), refVal_a_objPhone );
        setAObjPhone(refVal_a_objPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("a_objEmail")))
    {
        std::vector<std::shared_ptr<Email_Request>> refVal_a_objEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("a_objEmail")), refVal_a_objEmail );
        setAObjEmail(refVal_a_objEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("a_objWebsite")))
    {
        std::vector<std::shared_ptr<Website_Request>> refVal_a_objWebsite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("a_objWebsite")), refVal_a_objWebsite );
        setAObjWebsite(refVal_a_objWebsite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iAddressDefault")))
    {
        int32_t refVal_iAddressDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iAddressDefault")), refVal_iAddressDefault );
        setIAddressDefault(refVal_iAddressDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iPhoneDefault")))
    {
        int32_t refVal_iPhoneDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iPhoneDefault")), refVal_iPhoneDefault );
        setIPhoneDefault(refVal_iPhoneDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iEmailDefault")))
    {
        int32_t refVal_iEmailDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iEmailDefault")), refVal_iEmailDefault );
        setIEmailDefault(refVal_iEmailDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iWebsiteDefault")))
    {
        int32_t refVal_iWebsiteDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iWebsiteDefault")), refVal_iWebsiteDefault );
        setIWebsiteDefault(refVal_iWebsiteDefault);
    }
    return ok;
}

std::vector<std::shared_ptr<Address_Request>>& Contactinformations_RequestCompound::getAObjAddress()
{
    return m_A_objAddress;
}

void Contactinformations_RequestCompound::setAObjAddress(const std::vector<std::shared_ptr<Address_Request>>& value)
{
    m_A_objAddress = value;
    m_A_objAddressIsSet = true;
}

bool Contactinformations_RequestCompound::aObjAddressIsSet() const
{
    return m_A_objAddressIsSet;
}

void Contactinformations_RequestCompound::unsetA_objAddress()
{
    m_A_objAddressIsSet = false;
}
std::vector<std::shared_ptr<Phone_Request>>& Contactinformations_RequestCompound::getAObjPhone()
{
    return m_A_objPhone;
}

void Contactinformations_RequestCompound::setAObjPhone(const std::vector<std::shared_ptr<Phone_Request>>& value)
{
    m_A_objPhone = value;
    m_A_objPhoneIsSet = true;
}

bool Contactinformations_RequestCompound::aObjPhoneIsSet() const
{
    return m_A_objPhoneIsSet;
}

void Contactinformations_RequestCompound::unsetA_objPhone()
{
    m_A_objPhoneIsSet = false;
}
std::vector<std::shared_ptr<Email_Request>>& Contactinformations_RequestCompound::getAObjEmail()
{
    return m_A_objEmail;
}

void Contactinformations_RequestCompound::setAObjEmail(const std::vector<std::shared_ptr<Email_Request>>& value)
{
    m_A_objEmail = value;
    m_A_objEmailIsSet = true;
}

bool Contactinformations_RequestCompound::aObjEmailIsSet() const
{
    return m_A_objEmailIsSet;
}

void Contactinformations_RequestCompound::unsetA_objEmail()
{
    m_A_objEmailIsSet = false;
}
std::vector<std::shared_ptr<Website_Request>>& Contactinformations_RequestCompound::getAObjWebsite()
{
    return m_A_objWebsite;
}

void Contactinformations_RequestCompound::setAObjWebsite(const std::vector<std::shared_ptr<Website_Request>>& value)
{
    m_A_objWebsite = value;
    m_A_objWebsiteIsSet = true;
}

bool Contactinformations_RequestCompound::aObjWebsiteIsSet() const
{
    return m_A_objWebsiteIsSet;
}

void Contactinformations_RequestCompound::unsetA_objWebsite()
{
    m_A_objWebsiteIsSet = false;
}
int32_t Contactinformations_RequestCompound::getIAddressDefault() const
{
    return m_IAddressDefault;
}

void Contactinformations_RequestCompound::setIAddressDefault(int32_t value)
{
    m_IAddressDefault = value;
    m_IAddressDefaultIsSet = true;
}

bool Contactinformations_RequestCompound::iAddressDefaultIsSet() const
{
    return m_IAddressDefaultIsSet;
}

void Contactinformations_RequestCompound::unsetIAddressDefault()
{
    m_IAddressDefaultIsSet = false;
}
int32_t Contactinformations_RequestCompound::getIPhoneDefault() const
{
    return m_IPhoneDefault;
}

void Contactinformations_RequestCompound::setIPhoneDefault(int32_t value)
{
    m_IPhoneDefault = value;
    m_IPhoneDefaultIsSet = true;
}

bool Contactinformations_RequestCompound::iPhoneDefaultIsSet() const
{
    return m_IPhoneDefaultIsSet;
}

void Contactinformations_RequestCompound::unsetIPhoneDefault()
{
    m_IPhoneDefaultIsSet = false;
}
int32_t Contactinformations_RequestCompound::getIEmailDefault() const
{
    return m_IEmailDefault;
}

void Contactinformations_RequestCompound::setIEmailDefault(int32_t value)
{
    m_IEmailDefault = value;
    m_IEmailDefaultIsSet = true;
}

bool Contactinformations_RequestCompound::iEmailDefaultIsSet() const
{
    return m_IEmailDefaultIsSet;
}

void Contactinformations_RequestCompound::unsetIEmailDefault()
{
    m_IEmailDefaultIsSet = false;
}
int32_t Contactinformations_RequestCompound::getIWebsiteDefault() const
{
    return m_IWebsiteDefault;
}

void Contactinformations_RequestCompound::setIWebsiteDefault(int32_t value)
{
    m_IWebsiteDefault = value;
    m_IWebsiteDefaultIsSet = true;
}

bool Contactinformations_RequestCompound::iWebsiteDefaultIsSet() const
{
    return m_IWebsiteDefaultIsSet;
}

void Contactinformations_RequestCompound::unsetIWebsiteDefault()
{
    m_IWebsiteDefaultIsSet = false;
}
}
}
}
}


