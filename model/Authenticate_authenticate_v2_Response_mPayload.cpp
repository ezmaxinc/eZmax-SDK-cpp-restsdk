/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.45
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Authenticate_authenticate_v2_Response_mPayload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Authenticate_authenticate_v2_Response_mPayload::Authenticate_authenticate_v2_Response_mPayload()
{
    m_SAuthorization = utility::conversions::to_string_t("");
    m_SAuthorizationIsSet = false;
    m_SSecret = utility::conversions::to_string_t("");
    m_SSecretIsSet = false;
}

Authenticate_authenticate_v2_Response_mPayload::~Authenticate_authenticate_v2_Response_mPayload()
{
}

void Authenticate_authenticate_v2_Response_mPayload::validate()
{
    // TODO: implement validation
}

web::json::value Authenticate_authenticate_v2_Response_mPayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SAuthorizationIsSet)
    {
        val[utility::conversions::to_string_t("sAuthorization")] = ModelBase::toJson(m_SAuthorization);
    }
    if(m_SSecretIsSet)
    {
        val[utility::conversions::to_string_t("sSecret")] = ModelBase::toJson(m_SSecret);
    }

    return val;
}

bool Authenticate_authenticate_v2_Response_mPayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("sAuthorization")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sAuthorization"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sAuthorization;
            ok &= ModelBase::fromJson(fieldValue, refVal_sAuthorization);
            setSAuthorization(refVal_sAuthorization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sSecret")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sSecret"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sSecret;
            ok &= ModelBase::fromJson(fieldValue, refVal_sSecret);
            setSSecret(refVal_sSecret);
        }
    }
    return ok;
}

void Authenticate_authenticate_v2_Response_mPayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SAuthorizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sAuthorization"), m_SAuthorization));
    }
    if(m_SSecretIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sSecret"), m_SSecret));
    }
}

bool Authenticate_authenticate_v2_Response_mPayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sAuthorization")))
    {
        utility::string_t refVal_sAuthorization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sAuthorization")), refVal_sAuthorization );
        setSAuthorization(refVal_sAuthorization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sSecret")))
    {
        utility::string_t refVal_sSecret;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sSecret")), refVal_sSecret );
        setSSecret(refVal_sSecret);
    }
    return ok;
}

utility::string_t Authenticate_authenticate_v2_Response_mPayload::getSAuthorization() const
{
    return m_SAuthorization;
}

void Authenticate_authenticate_v2_Response_mPayload::setSAuthorization(const utility::string_t& value)
{
    m_SAuthorization = value;
    m_SAuthorizationIsSet = true;
}

bool Authenticate_authenticate_v2_Response_mPayload::sAuthorizationIsSet() const
{
    return m_SAuthorizationIsSet;
}

void Authenticate_authenticate_v2_Response_mPayload::unsetSAuthorization()
{
    m_SAuthorizationIsSet = false;
}
utility::string_t Authenticate_authenticate_v2_Response_mPayload::getSSecret() const
{
    return m_SSecret;
}

void Authenticate_authenticate_v2_Response_mPayload::setSSecret(const utility::string_t& value)
{
    m_SSecret = value;
    m_SSecretIsSet = true;
}

bool Authenticate_authenticate_v2_Response_mPayload::sSecretIsSet() const
{
    return m_SSecretIsSet;
}

void Authenticate_authenticate_v2_Response_mPayload::unsetSSecret()
{
    m_SSecretIsSet = false;
}
}
}
}
}


