/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.41
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Contactinformations_RequestCompound.h
 *
 * A Contactinformations Object and children to create a complete structure
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Contactinformations_RequestCompound_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Contactinformations_RequestCompound_H_


#include "../ModelBase.h"

#include "Contactinformations_Request.h"
#include "Address_Request.h"
#include "Email_Request.h"
#include "Phone_Request.h"
#include <vector>
#include "Website_Request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// A Contactinformations Object and children to create a complete structure
/// </summary>
class  Contactinformations_RequestCompound
    : public ModelBase
{
public:
    Contactinformations_RequestCompound();
    virtual ~Contactinformations_RequestCompound();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Contactinformations_RequestCompound members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Address_Request>>& getAObjAddress();
    bool aObjAddressIsSet() const;
    void unsetA_objAddress();

    void setAObjAddress(const std::vector<std::shared_ptr<Address_Request>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Phone_Request>>& getAObjPhone();
    bool aObjPhoneIsSet() const;
    void unsetA_objPhone();

    void setAObjPhone(const std::vector<std::shared_ptr<Phone_Request>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Email_Request>>& getAObjEmail();
    bool aObjEmailIsSet() const;
    void unsetA_objEmail();

    void setAObjEmail(const std::vector<std::shared_ptr<Email_Request>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Website_Request>>& getAObjWebsite();
    bool aObjWebsiteIsSet() const;
    void unsetA_objWebsite();

    void setAObjWebsite(const std::vector<std::shared_ptr<Website_Request>>& value);

    /// <summary>
    /// The index in the a_objAddress array (zero based index) representing the Address object that should become the default one.  You can leave the value to 0 if the array is empty.
    /// </summary>
    int32_t getIAddressDefault() const;
    bool iAddressDefaultIsSet() const;
    void unsetIAddressDefault();

    void setIAddressDefault(int32_t value);

    /// <summary>
    /// The index in the a_objPhone array (zero based index) representing the Phone object that should become the default one.  You can leave the value to 0 if the array is empty.
    /// </summary>
    int32_t getIPhoneDefault() const;
    bool iPhoneDefaultIsSet() const;
    void unsetIPhoneDefault();

    void setIPhoneDefault(int32_t value);

    /// <summary>
    /// The index in the a_objEmail array (zero based index) representing the Email object that should become the default one.  You can leave the value to 0 if the array is empty.
    /// </summary>
    int32_t getIEmailDefault() const;
    bool iEmailDefaultIsSet() const;
    void unsetIEmailDefault();

    void setIEmailDefault(int32_t value);

    /// <summary>
    /// The index in the a_objWebsite array (zero based index) representing the Website object that should become the default one.  You can leave the value to 0 if the array is empty.
    /// </summary>
    int32_t getIWebsiteDefault() const;
    bool iWebsiteDefaultIsSet() const;
    void unsetIWebsiteDefault();

    void setIWebsiteDefault(int32_t value);


protected:
    std::vector<std::shared_ptr<Address_Request>> m_A_objAddress;
    bool m_A_objAddressIsSet;
    std::vector<std::shared_ptr<Phone_Request>> m_A_objPhone;
    bool m_A_objPhoneIsSet;
    std::vector<std::shared_ptr<Email_Request>> m_A_objEmail;
    bool m_A_objEmailIsSet;
    std::vector<std::shared_ptr<Website_Request>> m_A_objWebsite;
    bool m_A_objWebsiteIsSet;
    int32_t m_IAddressDefault;
    bool m_IAddressDefaultIsSet;
    int32_t m_IPhoneDefault;
    bool m_IPhoneDefaultIsSet;
    int32_t m_IEmailDefault;
    bool m_IEmailDefaultIsSet;
    int32_t m_IWebsiteDefault;
    bool m_IWebsiteDefaultIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Contactinformations_RequestCompound_H_ */
