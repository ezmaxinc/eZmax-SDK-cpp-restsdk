/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.32
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Address_Request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Address_Request::Address_Request()
{
    m_FkiAddresstypeID = 0;
    m_FkiAddresstypeIDIsSet = false;
    m_SAddressCivic = utility::conversions::to_string_t("");
    m_SAddressCivicIsSet = false;
    m_SAddressStreet = utility::conversions::to_string_t("");
    m_SAddressStreetIsSet = false;
    m_SAddressSuite = utility::conversions::to_string_t("");
    m_SAddressSuiteIsSet = false;
    m_SAddressCity = utility::conversions::to_string_t("");
    m_SAddressCityIsSet = false;
    m_FkiProvinceID = 0;
    m_FkiProvinceIDIsSet = false;
    m_FkiCountryID = 0;
    m_FkiCountryIDIsSet = false;
    m_SAddressZip = utility::conversions::to_string_t("");
    m_SAddressZipIsSet = false;
}

Address_Request::~Address_Request()
{
}

void Address_Request::validate()
{
    // TODO: implement validation
}

web::json::value Address_Request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FkiAddresstypeIDIsSet)
    {
        val[utility::conversions::to_string_t("fkiAddresstypeID")] = ModelBase::toJson(m_FkiAddresstypeID);
    }
    if(m_SAddressCivicIsSet)
    {
        val[utility::conversions::to_string_t("sAddressCivic")] = ModelBase::toJson(m_SAddressCivic);
    }
    if(m_SAddressStreetIsSet)
    {
        val[utility::conversions::to_string_t("sAddressStreet")] = ModelBase::toJson(m_SAddressStreet);
    }
    if(m_SAddressSuiteIsSet)
    {
        val[utility::conversions::to_string_t("sAddressSuite")] = ModelBase::toJson(m_SAddressSuite);
    }
    if(m_SAddressCityIsSet)
    {
        val[utility::conversions::to_string_t("sAddressCity")] = ModelBase::toJson(m_SAddressCity);
    }
    if(m_FkiProvinceIDIsSet)
    {
        val[utility::conversions::to_string_t("fkiProvinceID")] = ModelBase::toJson(m_FkiProvinceID);
    }
    if(m_FkiCountryIDIsSet)
    {
        val[utility::conversions::to_string_t("fkiCountryID")] = ModelBase::toJson(m_FkiCountryID);
    }
    if(m_SAddressZipIsSet)
    {
        val[utility::conversions::to_string_t("sAddressZip")] = ModelBase::toJson(m_SAddressZip);
    }

    return val;
}

bool Address_Request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("fkiAddresstypeID")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fkiAddresstypeID"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fkiAddresstypeID;
            ok &= ModelBase::fromJson(fieldValue, refVal_fkiAddresstypeID);
            setFkiAddresstypeID(refVal_fkiAddresstypeID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sAddressCivic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sAddressCivic"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sAddressCivic;
            ok &= ModelBase::fromJson(fieldValue, refVal_sAddressCivic);
            setSAddressCivic(refVal_sAddressCivic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sAddressStreet")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sAddressStreet"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sAddressStreet;
            ok &= ModelBase::fromJson(fieldValue, refVal_sAddressStreet);
            setSAddressStreet(refVal_sAddressStreet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sAddressSuite")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sAddressSuite"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sAddressSuite;
            ok &= ModelBase::fromJson(fieldValue, refVal_sAddressSuite);
            setSAddressSuite(refVal_sAddressSuite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sAddressCity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sAddressCity"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sAddressCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_sAddressCity);
            setSAddressCity(refVal_sAddressCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fkiProvinceID")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fkiProvinceID"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fkiProvinceID;
            ok &= ModelBase::fromJson(fieldValue, refVal_fkiProvinceID);
            setFkiProvinceID(refVal_fkiProvinceID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fkiCountryID")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fkiCountryID"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fkiCountryID;
            ok &= ModelBase::fromJson(fieldValue, refVal_fkiCountryID);
            setFkiCountryID(refVal_fkiCountryID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sAddressZip")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sAddressZip"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sAddressZip;
            ok &= ModelBase::fromJson(fieldValue, refVal_sAddressZip);
            setSAddressZip(refVal_sAddressZip);
        }
    }
    return ok;
}

void Address_Request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FkiAddresstypeIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fkiAddresstypeID"), m_FkiAddresstypeID));
    }
    if(m_SAddressCivicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sAddressCivic"), m_SAddressCivic));
    }
    if(m_SAddressStreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sAddressStreet"), m_SAddressStreet));
    }
    if(m_SAddressSuiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sAddressSuite"), m_SAddressSuite));
    }
    if(m_SAddressCityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sAddressCity"), m_SAddressCity));
    }
    if(m_FkiProvinceIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fkiProvinceID"), m_FkiProvinceID));
    }
    if(m_FkiCountryIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fkiCountryID"), m_FkiCountryID));
    }
    if(m_SAddressZipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sAddressZip"), m_SAddressZip));
    }
}

bool Address_Request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("fkiAddresstypeID")))
    {
        int32_t refVal_fkiAddresstypeID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fkiAddresstypeID")), refVal_fkiAddresstypeID );
        setFkiAddresstypeID(refVal_fkiAddresstypeID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sAddressCivic")))
    {
        utility::string_t refVal_sAddressCivic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sAddressCivic")), refVal_sAddressCivic );
        setSAddressCivic(refVal_sAddressCivic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sAddressStreet")))
    {
        utility::string_t refVal_sAddressStreet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sAddressStreet")), refVal_sAddressStreet );
        setSAddressStreet(refVal_sAddressStreet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sAddressSuite")))
    {
        utility::string_t refVal_sAddressSuite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sAddressSuite")), refVal_sAddressSuite );
        setSAddressSuite(refVal_sAddressSuite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sAddressCity")))
    {
        utility::string_t refVal_sAddressCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sAddressCity")), refVal_sAddressCity );
        setSAddressCity(refVal_sAddressCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fkiProvinceID")))
    {
        int32_t refVal_fkiProvinceID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fkiProvinceID")), refVal_fkiProvinceID );
        setFkiProvinceID(refVal_fkiProvinceID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fkiCountryID")))
    {
        int32_t refVal_fkiCountryID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fkiCountryID")), refVal_fkiCountryID );
        setFkiCountryID(refVal_fkiCountryID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sAddressZip")))
    {
        utility::string_t refVal_sAddressZip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sAddressZip")), refVal_sAddressZip );
        setSAddressZip(refVal_sAddressZip);
    }
    return ok;
}

int32_t Address_Request::getFkiAddresstypeID() const
{
    return m_FkiAddresstypeID;
}

void Address_Request::setFkiAddresstypeID(int32_t value)
{
    m_FkiAddresstypeID = value;
    m_FkiAddresstypeIDIsSet = true;
}

bool Address_Request::fkiAddresstypeIDIsSet() const
{
    return m_FkiAddresstypeIDIsSet;
}

void Address_Request::unsetFkiAddresstypeID()
{
    m_FkiAddresstypeIDIsSet = false;
}
utility::string_t Address_Request::getSAddressCivic() const
{
    return m_SAddressCivic;
}

void Address_Request::setSAddressCivic(const utility::string_t& value)
{
    m_SAddressCivic = value;
    m_SAddressCivicIsSet = true;
}

bool Address_Request::sAddressCivicIsSet() const
{
    return m_SAddressCivicIsSet;
}

void Address_Request::unsetSAddressCivic()
{
    m_SAddressCivicIsSet = false;
}
utility::string_t Address_Request::getSAddressStreet() const
{
    return m_SAddressStreet;
}

void Address_Request::setSAddressStreet(const utility::string_t& value)
{
    m_SAddressStreet = value;
    m_SAddressStreetIsSet = true;
}

bool Address_Request::sAddressStreetIsSet() const
{
    return m_SAddressStreetIsSet;
}

void Address_Request::unsetSAddressStreet()
{
    m_SAddressStreetIsSet = false;
}
utility::string_t Address_Request::getSAddressSuite() const
{
    return m_SAddressSuite;
}

void Address_Request::setSAddressSuite(const utility::string_t& value)
{
    m_SAddressSuite = value;
    m_SAddressSuiteIsSet = true;
}

bool Address_Request::sAddressSuiteIsSet() const
{
    return m_SAddressSuiteIsSet;
}

void Address_Request::unsetSAddressSuite()
{
    m_SAddressSuiteIsSet = false;
}
utility::string_t Address_Request::getSAddressCity() const
{
    return m_SAddressCity;
}

void Address_Request::setSAddressCity(const utility::string_t& value)
{
    m_SAddressCity = value;
    m_SAddressCityIsSet = true;
}

bool Address_Request::sAddressCityIsSet() const
{
    return m_SAddressCityIsSet;
}

void Address_Request::unsetSAddressCity()
{
    m_SAddressCityIsSet = false;
}
int32_t Address_Request::getFkiProvinceID() const
{
    return m_FkiProvinceID;
}

void Address_Request::setFkiProvinceID(int32_t value)
{
    m_FkiProvinceID = value;
    m_FkiProvinceIDIsSet = true;
}

bool Address_Request::fkiProvinceIDIsSet() const
{
    return m_FkiProvinceIDIsSet;
}

void Address_Request::unsetFkiProvinceID()
{
    m_FkiProvinceIDIsSet = false;
}
int32_t Address_Request::getFkiCountryID() const
{
    return m_FkiCountryID;
}

void Address_Request::setFkiCountryID(int32_t value)
{
    m_FkiCountryID = value;
    m_FkiCountryIDIsSet = true;
}

bool Address_Request::fkiCountryIDIsSet() const
{
    return m_FkiCountryIDIsSet;
}

void Address_Request::unsetFkiCountryID()
{
    m_FkiCountryIDIsSet = false;
}
utility::string_t Address_Request::getSAddressZip() const
{
    return m_SAddressZip;
}

void Address_Request::setSAddressZip(const utility::string_t& value)
{
    m_SAddressZip = value;
    m_SAddressZipIsSet = true;
}

bool Address_Request::sAddressZipIsSet() const
{
    return m_SAddressZipIsSet;
}

void Address_Request::unsetSAddressZip()
{
    m_SAddressZipIsSet = false;
}
}
}
}
}


