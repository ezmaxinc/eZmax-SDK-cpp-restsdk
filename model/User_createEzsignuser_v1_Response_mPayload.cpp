/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.39
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "User_createEzsignuser_v1_Response_mPayload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




User_createEzsignuser_v1_Response_mPayload::User_createEzsignuser_v1_Response_mPayload()
{
    m_A_sEmailAddressSuccessIsSet = false;
    m_A_sEmailAddressFailureIsSet = false;
}

User_createEzsignuser_v1_Response_mPayload::~User_createEzsignuser_v1_Response_mPayload()
{
}

void User_createEzsignuser_v1_Response_mPayload::validate()
{
    // TODO: implement validation
}

web::json::value User_createEzsignuser_v1_Response_mPayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_A_sEmailAddressSuccessIsSet)
    {
        val[utility::conversions::to_string_t("a_sEmailAddressSuccess")] = ModelBase::toJson(m_A_sEmailAddressSuccess);
    }
    if(m_A_sEmailAddressFailureIsSet)
    {
        val[utility::conversions::to_string_t("a_sEmailAddressFailure")] = ModelBase::toJson(m_A_sEmailAddressFailure);
    }

    return val;
}

bool User_createEzsignuser_v1_Response_mPayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("a_sEmailAddressSuccess")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("a_sEmailAddressSuccess"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_a_sEmailAddressSuccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_a_sEmailAddressSuccess);
            setASEmailAddressSuccess(refVal_a_sEmailAddressSuccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("a_sEmailAddressFailure")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("a_sEmailAddressFailure"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_a_sEmailAddressFailure;
            ok &= ModelBase::fromJson(fieldValue, refVal_a_sEmailAddressFailure);
            setASEmailAddressFailure(refVal_a_sEmailAddressFailure);
        }
    }
    return ok;
}

void User_createEzsignuser_v1_Response_mPayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_A_sEmailAddressSuccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("a_sEmailAddressSuccess"), m_A_sEmailAddressSuccess));
    }
    if(m_A_sEmailAddressFailureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("a_sEmailAddressFailure"), m_A_sEmailAddressFailure));
    }
}

bool User_createEzsignuser_v1_Response_mPayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("a_sEmailAddressSuccess")))
    {
        std::vector<utility::string_t> refVal_a_sEmailAddressSuccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("a_sEmailAddressSuccess")), refVal_a_sEmailAddressSuccess );
        setASEmailAddressSuccess(refVal_a_sEmailAddressSuccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("a_sEmailAddressFailure")))
    {
        std::vector<utility::string_t> refVal_a_sEmailAddressFailure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("a_sEmailAddressFailure")), refVal_a_sEmailAddressFailure );
        setASEmailAddressFailure(refVal_a_sEmailAddressFailure);
    }
    return ok;
}

std::vector<utility::string_t>& User_createEzsignuser_v1_Response_mPayload::getASEmailAddressSuccess()
{
    return m_A_sEmailAddressSuccess;
}

void User_createEzsignuser_v1_Response_mPayload::setASEmailAddressSuccess(const std::vector<utility::string_t>& value)
{
    m_A_sEmailAddressSuccess = value;
    m_A_sEmailAddressSuccessIsSet = true;
}

bool User_createEzsignuser_v1_Response_mPayload::aSEmailAddressSuccessIsSet() const
{
    return m_A_sEmailAddressSuccessIsSet;
}

void User_createEzsignuser_v1_Response_mPayload::unsetA_sEmailAddressSuccess()
{
    m_A_sEmailAddressSuccessIsSet = false;
}
std::vector<utility::string_t>& User_createEzsignuser_v1_Response_mPayload::getASEmailAddressFailure()
{
    return m_A_sEmailAddressFailure;
}

void User_createEzsignuser_v1_Response_mPayload::setASEmailAddressFailure(const std::vector<utility::string_t>& value)
{
    m_A_sEmailAddressFailure = value;
    m_A_sEmailAddressFailureIsSet = true;
}

bool User_createEzsignuser_v1_Response_mPayload::aSEmailAddressFailureIsSet() const
{
    return m_A_sEmailAddressFailureIsSet;
}

void User_createEzsignuser_v1_Response_mPayload::unsetA_sEmailAddressFailure()
{
    m_A_sEmailAddressFailureIsSet = false;
}
}
}
}
}


