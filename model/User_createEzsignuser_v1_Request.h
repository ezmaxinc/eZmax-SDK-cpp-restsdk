/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.29
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User_createEzsignuser_v1_Request.h
 *
 * Request for the /1/module/user/createEzsignuser API Request
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_User_createEzsignuser_v1_Request_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_User_createEzsignuser_v1_Request_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Request for the /1/module/user/createEzsignuser API Request
/// </summary>
class  User_createEzsignuser_v1_Request
    : public ModelBase
{
public:
    User_createEzsignuser_v1_Request();
    virtual ~User_createEzsignuser_v1_Request();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User_createEzsignuser_v1_Request members

    /// <summary>
    /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
    /// </summary>
    int32_t getFkiLanguageID() const;
    bool fkiLanguageIDIsSet() const;
    void unsetFkiLanguageID();

    void setFkiLanguageID(int32_t value);

    /// <summary>
    /// The First name of the user
    /// </summary>
    utility::string_t getSUserFirstname() const;
    bool sUserFirstnameIsSet() const;
    void unsetSUserFirstname();

    void setSUserFirstname(const utility::string_t& value);

    /// <summary>
    /// The Last name of the user
    /// </summary>
    utility::string_t getSUserLastname() const;
    bool sUserLastnameIsSet() const;
    void unsetSUserLastname();

    void setSUserLastname(const utility::string_t& value);

    /// <summary>
    /// The email address.
    /// </summary>
    utility::string_t getSEmailAddress() const;
    bool sEmailAddressIsSet() const;
    void unsetSEmailAddress();

    void setSEmailAddress(const utility::string_t& value);

    /// <summary>
    /// The region of the phone number. (For a North America Number only)  The region is the \&quot;514\&quot; section in this sample phone number: (514) 990-1516 x123
    /// </summary>
    utility::string_t getSPhoneRegion() const;
    bool sPhoneRegionIsSet() const;
    void unsetSPhoneRegion();

    void setSPhoneRegion(const utility::string_t& value);

    /// <summary>
    /// The exchange of the phone number. (For a North America Number only)  The exchange is the \&quot;990\&quot; section in this sample phone number: (514) 990-1516 x123
    /// </summary>
    utility::string_t getSPhoneExchange() const;
    bool sPhoneExchangeIsSet() const;
    void unsetSPhoneExchange();

    void setSPhoneExchange(const utility::string_t& value);

    /// <summary>
    /// The number of the phone number. (For a North America Number only)  The number is the \&quot;1516\&quot; section in this sample phone number: (514) 990-1516 x123
    /// </summary>
    utility::string_t getSPhoneNumber() const;
    bool sPhoneNumberIsSet() const;
    void unsetSPhoneNumber();

    void setSPhoneNumber(const utility::string_t& value);

    /// <summary>
    /// The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
    /// </summary>
    utility::string_t getSPhoneExtension() const;
    bool sPhoneExtensionIsSet() const;
    void unsetSPhoneExtension();

    void setSPhoneExtension(const utility::string_t& value);


protected:
    int32_t m_FkiLanguageID;
    bool m_FkiLanguageIDIsSet;
    utility::string_t m_SUserFirstname;
    bool m_SUserFirstnameIsSet;
    utility::string_t m_SUserLastname;
    bool m_SUserLastnameIsSet;
    utility::string_t m_SEmailAddress;
    bool m_SEmailAddressIsSet;
    utility::string_t m_SPhoneRegion;
    bool m_SPhoneRegionIsSet;
    utility::string_t m_SPhoneExchange;
    bool m_SPhoneExchangeIsSet;
    utility::string_t m_SPhoneNumber;
    bool m_SPhoneNumberIsSet;
    utility::string_t m_SPhoneExtension;
    bool m_SPhoneExtensionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_User_createEzsignuser_v1_Request_H_ */
