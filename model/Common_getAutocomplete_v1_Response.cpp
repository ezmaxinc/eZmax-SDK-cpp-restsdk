/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.27
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Common_getAutocomplete_v1_Response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Common_getAutocomplete_v1_Response::Common_getAutocomplete_v1_Response()
{
    m_MPayloadIsSet = false;
    m_ObjDebugPayloadIsSet = false;
    m_ObjDebugIsSet = false;
}

Common_getAutocomplete_v1_Response::~Common_getAutocomplete_v1_Response()
{
}

void Common_getAutocomplete_v1_Response::validate()
{
    // TODO: implement validation
}

web::json::value Common_getAutocomplete_v1_Response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MPayloadIsSet)
    {
        val[utility::conversions::to_string_t("mPayload")] = ModelBase::toJson(m_MPayload);
    }
    if(m_ObjDebugPayloadIsSet)
    {
        val[utility::conversions::to_string_t("objDebugPayload")] = ModelBase::toJson(m_ObjDebugPayload);
    }
    if(m_ObjDebugIsSet)
    {
        val[utility::conversions::to_string_t("objDebug")] = ModelBase::toJson(m_ObjDebug);
    }

    return val;
}

bool Common_getAutocomplete_v1_Response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("mPayload")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mPayload"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Common_getAutocomplete_v1_Response_mPayload>> refVal_mPayload;
            ok &= ModelBase::fromJson(fieldValue, refVal_mPayload);
            setMPayload(refVal_mPayload);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objDebugPayload")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objDebugPayload"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Common_Response_objDebugPayload> refVal_objDebugPayload;
            ok &= ModelBase::fromJson(fieldValue, refVal_objDebugPayload);
            setObjDebugPayload(refVal_objDebugPayload);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objDebug")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objDebug"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Common_Response_objDebug> refVal_objDebug;
            ok &= ModelBase::fromJson(fieldValue, refVal_objDebug);
            setObjDebug(refVal_objDebug);
        }
    }
    return ok;
}

void Common_getAutocomplete_v1_Response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MPayloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mPayload"), m_MPayload));
    }
    if(m_ObjDebugPayloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objDebugPayload"), m_ObjDebugPayload));
    }
    if(m_ObjDebugIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objDebug"), m_ObjDebug));
    }
}

bool Common_getAutocomplete_v1_Response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mPayload")))
    {
        std::vector<std::shared_ptr<Common_getAutocomplete_v1_Response_mPayload>> refVal_mPayload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mPayload")), refVal_mPayload );
        setMPayload(refVal_mPayload);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objDebugPayload")))
    {
        std::shared_ptr<Common_Response_objDebugPayload> refVal_objDebugPayload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objDebugPayload")), refVal_objDebugPayload );
        setObjDebugPayload(refVal_objDebugPayload);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objDebug")))
    {
        std::shared_ptr<Common_Response_objDebug> refVal_objDebug;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objDebug")), refVal_objDebug );
        setObjDebug(refVal_objDebug);
    }
    return ok;
}

std::vector<std::shared_ptr<Common_getAutocomplete_v1_Response_mPayload>>& Common_getAutocomplete_v1_Response::getMPayload()
{
    return m_MPayload;
}

void Common_getAutocomplete_v1_Response::setMPayload(const std::vector<std::shared_ptr<Common_getAutocomplete_v1_Response_mPayload>>& value)
{
    m_MPayload = value;
    m_MPayloadIsSet = true;
}

bool Common_getAutocomplete_v1_Response::mPayloadIsSet() const
{
    return m_MPayloadIsSet;
}

void Common_getAutocomplete_v1_Response::unsetMPayload()
{
    m_MPayloadIsSet = false;
}
std::shared_ptr<Common_Response_objDebugPayload> Common_getAutocomplete_v1_Response::getObjDebugPayload() const
{
    return m_ObjDebugPayload;
}

void Common_getAutocomplete_v1_Response::setObjDebugPayload(const std::shared_ptr<Common_Response_objDebugPayload>& value)
{
    m_ObjDebugPayload = value;
    m_ObjDebugPayloadIsSet = true;
}

bool Common_getAutocomplete_v1_Response::objDebugPayloadIsSet() const
{
    return m_ObjDebugPayloadIsSet;
}

void Common_getAutocomplete_v1_Response::unsetObjDebugPayload()
{
    m_ObjDebugPayloadIsSet = false;
}
std::shared_ptr<Common_Response_objDebug> Common_getAutocomplete_v1_Response::getObjDebug() const
{
    return m_ObjDebug;
}

void Common_getAutocomplete_v1_Response::setObjDebug(const std::shared_ptr<Common_Response_objDebug>& value)
{
    m_ObjDebug = value;
    m_ObjDebugIsSet = true;
}

bool Common_getAutocomplete_v1_Response::objDebugIsSet() const
{
    return m_ObjDebugIsSet;
}

void Common_getAutocomplete_v1_Response::unsetObjDebug()
{
    m_ObjDebugIsSet = false;
}
}
}
}
}


